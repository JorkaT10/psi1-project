@page "/usercreateaccount"
@using AccountDataSerializer
@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json
@using PSI_MobileApp.DataServices;
@using ProfileClasses
@using System.Collections.ObjectModel
@using System.Text.Json
@using ClassLibrary
@using System.ComponentModel.DataAnnotations
@implements IDisposable
@inject ExceptionLogger ExceptionLogger
@inject StateContainer StateContainer
@inject IGetData data
@inject NavigationManager NavigationManager
<h3>Create new account</h3>
<!--<MudText> Test </MudText>-->
<MudForm @bind-isValid = "@isValid">
    <MudTextField T="string" Label="Username" @bind-Value="Username" Required="true" RequiredError="Field Username is required." Validation="@(new Func<string, string>(IsUniqueUsername))" />  
    <MudTextField T="string" Label="Password" @bind-Value="Password" Required="true" RequiredError="Field Password is required." Validation="@(new Func<string, string>(ContainsWhitespace))" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
    <MudTextField T="string" Label="Confirm Password" @bind-Value="Confirm" Required="true" RequiredError="Field Confirm Password is required." Validation="@(new Func<string, string>(IsIdentical))" InputType="@PasswordInputConfirm" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIconConfirm" OnAdornmentClick="ButtonTestclickConfirm" AdornmentAriaLabel="Show Password" />
    <MudTextField T="string" Label="Email" @bind-Value="Email" Required="true" RequiredError="Field Email is required." Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid."})" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isValid)" Class="ml-auto" @onclick = "HandleSubmit">Register</MudButton>
</MudForm>

@code {
    public bool isValid;
    bool isShow;
    bool isShowConfirm;
    public InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    public InputType PasswordInputConfirm = InputType.Password;
    string PasswordInputIconConfirm = Icons.Material.Filled.VisibilityOff;
    public string Username;
    public string Password;
    public string Email;
    public string Confirm;
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    void ButtonTestclickConfirm()
    {
        @if (isShowConfirm)
        {
            isShowConfirm = false;
            PasswordInputIconConfirm = Icons.Material.Filled.VisibilityOff;
            PasswordInputConfirm = InputType.Password;
        }
        else
        {
            isShowConfirm = true;
            PasswordInputIconConfirm = Icons.Material.Filled.Visibility;
            PasswordInputConfirm = InputType.Text;
        }
    }
    public void HandleSubmit()
    {
        Profile profile = new();
        Account account = new();
        profile.Name = Username;
        profile.Email = Email;
        profile.Id = Guid.NewGuid();
        account.Id = profile.Id;
        account.Password = Password;
        account.UserName = Username;
        StateContainer.TempAccount = account;
        StateContainer.TempProfile = profile;
        if (StateContainer.CreatingDistributor)
        {
            NavigationManager.NavigateTo("inputcontactdata");
        }
        else
        {
            NavigationManager.NavigateTo("inputcontactdata");
        }
    }
    public string IsIdentical(string confirm)
    {

        if (String.Equals(confirm, Password))
        {
            return null;
        }
        return "Passwords do not match.";
    }

    public string ContainsWhitespace(string password)
    {
        if (password == null)
        {
            return "Password cannot be empty.";
        }
        if (password.Any(character => Char.IsWhiteSpace(character)))
        {
            return "Password cannot contain spaces.";
        }
        return null;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    public string IsUniqueUsername(string username)
    {
        if(data.GetAllAccounts().Result.All(a => !a.UserName.Equals(username)))
        {
            return null;
        }
        else
        {
            return "Username is already in use.";
        }
    }
    
}