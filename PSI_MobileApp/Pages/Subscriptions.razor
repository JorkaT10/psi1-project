@page "/subs"
@using ClassLibrary;
@using PSI_MobileApp.DataServices;
@using ProfileClasses
@using System.Collections.ObjectModel
@using Microsoft.EntityFrameworkCore
@using PSI_MobileApp.Extensions
@using System.Diagnostics;
@using PSI_MobileApp.Containers;
@inject StateContainer StateContainer
@inject IdStateContainer IdContainer
@inject NavigationManager NavigationManager
@inject CurrentUserContainer CurrentUserContainer
@inject IGetData data
@implements IDisposable

<h3>Subscriptions</h3>
@if (Profile == null || Profile?.Subscriptions == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Rating</th>
				<th>Cuisines</th>
			</tr>
		</thead>
		<tbody>
				@foreach (var supplier in Profile.Subscriptions)
				{
					<tr>
						<td @onclick="()=>GoToDetailOnClick(DistributorProfiles.First(i => supplier.Id == i.Id))">@DistributorProfiles.First(i => supplier.Id == i.Id).Name</td>
						<MudRating ReadOnly="true" Color="Color.Dark" SelectedValue=@Convert.ToInt32(supplier.Rating)></MudRating>
						<td>
							@foreach (var cuisine in DistributorProfiles.First(i => supplier.Id == i.Id).CuisineArray)
							{
								@cuisine.ToString()<br>
							}
						</td>
					<MudButton Variant="Variant.Filled" Color="Color.Secondary" class="btn btn-primary" @onclick="async ()=> await ChangeSubscriptionStatus(supplier.Id)">Unsubscribe</MudButton>
					</tr>
				}
		</tbody>
	</table>
}

@code {
	public Profile Profile { get; set; }
	public ObservableCollection<Profile> DistributorProfiles { get; set; }
	public void GoToDetailOnClick(Profile supplier)
	{
		StateContainer.OnChange += StateHasChanged;
		StateContainer.Supplier = supplier;
		IdContainer.Id = supplier.Id;
		NavigationManager.NavigateTo("/../supplierdetails");
	}

	public async Task ChangeSubscriptionStatus(Guid distributorId)
	{
		await data.ChangeSubscriptionStatus(distributorId, CurrentUserContainer.UserId);
		var distributor = await data.GetDistributorsById(distributorId);
		//context.SaveChanges();
	}

	protected override async Task OnInitializedAsync()
	{
		Debug.WriteLine("SubsInitialized");
		StateContainer.OnChange += StateHasChanged;
		Profile = null;
		if(CurrentUserContainer.UserId != Guid.Empty)
		{
			Profile = await data.GetProfileById(CurrentUserContainer.UserId);
		}
		DistributorProfiles = await data.GetDistributorProfiles();

		await base.OnInitializedAsync();
	}
	public void Dispose()
	{
		StateContainer.OnChange -= StateHasChanged;
	}

}
