@page "/subs"
@using ClassLibrary;
@using ProfileClasses
@using System.Collections.ObjectModel
@using AccountDataSerializer
@using Microsoft.EntityFrameworkCore
@using PSI_MobileApp.Extensions
@using System.Diagnostics;
@inject StateContainer StateContainer
@inject IdStateContainer IdContainer
@inject NavigationManager NavigationManager
@inject CurrentUserContainer CurrentUserContainer
@inject IDbContextFactory<ProjectDatabaseContext> DbFactory
@inject ExceptionLogger Logger
@implements IDisposable

<h3>Subscriptions</h3>
@if (Profile == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Rating</th>
				<th>Cuisines</th>
			</tr>
		</thead>
		<tbody>
			@try
			{
				@foreach (var supplier in _context.Profiles.Include("Subscriptions").First(i => i.Id == Profile.Id).Subscriptions)
				{
					<tr>
						<td @onclick="()=>GoToDetailOnClick(DistributorProfiles.First(i => supplier.Id == i.Id))">@DistributorProfiles.First(i => supplier.Id == i.Id).Name</td>
						<MudRating ReadOnly="true" Color="Color.Dark" SelectedValue=@Convert.ToInt32(supplier.Rating)></MudRating>
						<td>
							@foreach (var cuisine in DistributorProfiles.Where(elem => elem.Id == supplier.Id))
							{
								@cuisine.ToString()<br>
							}
						</td>
						<MudButton Variant="Variant.Filled" Color="Color.Secondary" class="btn btn-primary" @onclick="()=>ChangeSubscriptionStatus(supplier)">Unsubscribe</MudButton>
					</tr>
				}
			}
			catch(Exception ex)
			{
				Logger.Log(ex);
			}
		</tbody>
	</table>
}

@code {
	public Profile Profile { get; set; }
	public List<Profile> DistributorProfiles { get; set; }
	private ProjectDatabaseContext _context;

	public void GoToDetailOnClick(Profile supplier)
	{
		StateContainer.OnChange += StateHasChanged;
		StateContainer.Supplier = supplier;
		IdContainer.Id = supplier.Id;
		NavigationManager.NavigateTo("/supplierdetails");
	}

	public void ChangeSubscriptionStatus(Distributor distributor)
	{
		if (_context.Profiles.Include("Subscriptions").First(i => i.Id == Profile.Id).Subscriptions.Contains(distributor))
		{
			_context.Profiles.Include("Subscriptions").First(i => i.Id == Profile.Id).Subscriptions.Remove(distributor);
		}
		else
		{
			_context.Profiles.Include("Subscriptions").First(i => i.Id == Profile.Id).Subscriptions.Add(distributor);
		}
		_context.SaveChanges();
	}

	protected override async Task OnInitializedAsync()
	{
		Debug.WriteLine("SubsInitialized");
		try
		{
			_context = DbFactory.CreateDbContext();
			if (_context != null && _context.Profiles != null)
			{
				StateContainer.OnChange += StateHasChanged;

				Profile = CurrentUserContainer.GetUserProfile();
				DistributorProfiles = _context.Profiles.ToList();
			}

		}
		catch(Exception ex)
		{
			Logger.Log(ex);
		}
		await base.OnInitializedAsync();
	}
	public void Dispose()
	{
		_context.SaveChanges();
		StateContainer.OnChange -= StateHasChanged;
		_context?.Dispose();
	}

}
