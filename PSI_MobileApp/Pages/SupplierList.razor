@page "/supplierlist"
@using AccountDataSerializer
@using ClassLibrary
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Storage
@using Npgsql
@using MudBlazor
@using MudBlazorFix
@using PSI_MobileApp.DataServices;
@using PSI_MobileApp.Extensions
@using ProfileClasses
@using System.Collections.ObjectModel
@using System.Net.NetworkInformation
@using System.Diagnostics
@inject StateContainer StateContainer
@inject IdStateContainer IdContainer
@inject CurrentUserContainer CurrentUserContainer
@inject NavigationManager NavigationManager
@inject IGetData data
@implements IDisposable



<h3>Supplier List</h3>

@if (!connected || (Profiles == null) || (Distributors == null))
{
    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true"></MudTextField>

    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" OnRowClick="@GoToDetailOnClick" LoadingProgressColor="Color.Info" T="Profile">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Rating</MudTh>
            <MudTh>Phone number</MudTh>
            <MudTh>Cuisines</MudTh>
            <MudTh>Subscribe</MudTh>
        </HeaderContent>
        <RowTemplate>
         
        </RowTemplate>


    </MudTable>

    <MudOverlay Visible="true" DarkBackground="true" Absolute="true" >
        <MudStack AlignItems="AlignItems.Center">
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
            <MudText>Loading...</MudText>
            <MudText>@errorOccured</MudText>
            <MudText>@tryingToConnect</MudText>
            <MudButton Variant="Variant.Outlined" OnClick="Return">Return to Homepage</MudButton>
        </MudStack>
        
    </MudOverlay>
    
}
else
{
    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true"></MudTextField>

    <MudTable @ref="mudTable" ServerData="@(new Func<TableState, Task<TableData<Profile>>>(ServerReload))" Hover="true" Breakpoint="Breakpoint.Sm" OnRowClick="@GoToDetailOnClick"  LoadingProgressColor="Color.Info" T="Profile">
		<HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="name" T="Profile">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="rating" T="Profile">Rating</MudTableSortLabel></MudTh>
                <MudTh>Phone number</MudTh>
                <MudTh>Cuisines</MudTh>
                <MudTh>Subscribe</MudTh>
		</HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd><MudRating ReadOnly="true" Color="Color.Dark" SelectedValue=@Convert.ToInt32(Distributors.Where(d => d.Id == context.Id).FirstOrDefault().Rating)></MudRating></MudTd>
            <MudTd>@context.PhoneNumber</MudTd>
            <MudTd>
                @foreach (var cuisine in context.CuisineArray)
                {
                    @cuisine
                    <br/>
                }
            </MudTd>
            <MudTd>
                @if (Profile != null)
                {
                    @if(Profile.Subscriptions != null)
                    {
                        @if (Profile.Subscriptions.Any(d => d.Id == data.GetDistributorsByIdConcurrent(context.Id).Id))
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" class="btn btn-primary" OnClick="()=> ChangeSubscriptionStatus(context.Id)">Unsubscribe</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" class="btn btn-primary" OnClick="()=> ChangeSubscriptionStatus(context.Id)">Subscribe</MudButton>
                        }
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => ChangeSubscriptionStatus(context.Id)" class="btn btn-primary">Subscribe</MudButton>
                    }
                }
            </MudTd>
        </RowTemplate>
           

    </MudTable>
}


@code {
    // private AccountDataSerializer<Profile> _dataSerializer;
    private MudTable<Profile> mudTable;
    private ObservableCollection<Profile> _searchResult;
    private string canNotConnectText = string.Empty;
    private string errorOccured = string.Empty;
    private string tryingToConnect = string.Empty;
    private bool connected;
    public Profile Profile { get; set; }
    public ObservableCollection<Profile> SearchResults
    {
        get
        { return _searchResult; }
        set
        {
            _searchResult = value;

            //onpropertychanged();
        }
    }

    public ObservableCollection<Distributor> Distributors
    {
        get; private set;
    }

    public ObservableCollection<Profile> Profiles
    {
        get; private set;
    }

    protected override async Task OnInitializedAsync()
    {
        Profile = null;
        ActivateTestConnection();
        StateContainer.OnChange += StateHasChanged;
    }


    public string Search { get; set; } = String.Empty;

    public void OnSearch(string search)
    {
        Search = search;
        mudTable.ReloadServerData();
    }


    private void GoToDetailOnClick(TableRowClickEventArgs<Profile> tableRowClickEventArgs)
    {
        IdContainer.OnChange += StateHasChanged;
        IdContainer.Id = tableRowClickEventArgs.Item.Id;
        NavigationManager.NavigateTo("/supplierdetails");
    }

    public async Task ChangeSubscriptionStatus(Guid distributorId)
    {
        await data.ChangeSubscriptionStatus(distributorId, CurrentUserContainer.UserId);
        var distributor = await data.GetDistributorsById(distributorId);
        //context.SaveChanges();
        await mudTable.ReloadServerData();
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;

    }

    public void Return()
    {
        //tryingToConnect = "Trying to reconnect..."; // don't know if should leave it like this or remove it since it returns back to homepage.
        StateHasChanged();
        NavigationManager.NavigateTo("/", true);

    }


    async void ActivateTestConnection()
    {
        await Task.Run(async () =>
        {
            while (true)
            {
                using (ProjectDatabaseContext context = new())
                {

                    if (CurrentUserContainer.UserId != Guid.Empty)
                    {
                        Profile = await data.GetProfileById(CurrentUserContainer.UserId);
                    }
                    connected = await context.TestConnection();
                    if (connected)
                        await GetDBData();
                    else
                        errorOccured = "A network error occured. Please try again.";
                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(10000);
                }
            }
        });
    }

    async Task GetDBData()
    {

        Profiles = await data.GetDistributorProfiles();
        Distributors = await data.GetAllDistributors();

        SearchResults = Profiles;
        await InvokeAsync(StateHasChanged);
    }

    private IEnumerable<Profile> pagedData;
    private int totalItems;
    private async Task<TableData<Profile>> ServerReload(TableState state)
    {
        await data.RemoveOutdated(DateTime.UtcNow);
        IEnumerable<Profile> queryFirst = await data.GetDistributorProfiles();
        IEnumerable<Profile> query = DataSearch.getSearchResults(queryFirst, searchQuery: Search); // dbContext.Advertisements.Include(a => a.Buyer).Where(a => a.Distributor.Id == profile.Id);
        await Task.Delay(300);

        switch (state.SortLabel)
        {
            case "name":
                query = query.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "rating":
                query = query.OrderByDirection(state.SortDirection, o => data.GetDistributorsByIdConcurrent(o.Id).Rating);
                break;
            default:
                query = query.OrderBy(o => o.Name);
                break;
        }

        totalItems = query.Count();
        pagedData = query.Skip(state.Page * state.PageSize).Take(state.PageSize);
        return new TableData<Profile>() { TotalItems = totalItems, Items = pagedData };

    }

}
