@page "/supplierlist"
@using AccountDataSerializer
@using ClassLibrary
@using Microsoft.EntityFrameworkCore
@using PSI_MobileApp.Extensions
@using ProfileClasses
@using System.Collections.ObjectModel
@using System.Diagnostics;
@inject StateContainer StateContainer
@inject IdStateContainer IdContainer
@inject CurrentUserContainer CurrentUserContainer
@inject NavigationManager NavigationManager
@inject ExceptionLogger Logger
@inject IDbContextFactory<ProjectDatabaseContext> DbFactory
@implements IDisposable


<h3>Supplier List</h3>

@if (Profiles == null @*|| Profile == null*@ @*|| Profile.Subscriptions == null*@)
{ 
    
    <div>
    <input class="form-control" type="text" placeholder="Search"
            @bind="Search"
            @oninput="(e) =>  SearchCommand(e.Value.ToString())" />
    </div>

	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Rating</th>
                <th>Phone number</th>
                <th>Cuisines</th>
			</tr>
		</thead>
    </table>

    <MudOverlay Visible="true" DarkBackground="true" Absolute="true" >
        <MudStack AlignItems="AlignItems.Center">
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
            <MudText>An error has occured while loading data.</MudText>
            <MudText>@canNotConnectText</MudText>
            <MudButton Variant="Variant.Outlined" OnClick="Refresh">Refresh</MudButton>
       </MudStack>
        
    </MudOverlay>
    
}
else
{
    <div>
        <input class="form-control" type="text" placeholder="Search"
               @bind="Search"
               @oninput="(e) =>  SearchCommand(e.Value.ToString())" />
    </div>

	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Rating</th>
                <th>Phone number</th>
                <th>Cuisines</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var supplier in SearchResults)
			{
                
                <tr @onclick="()=>GoToDetailOnClick(supplier)">
                    <td>@supplier.Name</td>
                    <MudRating ReadOnly="true" Color="Color.Dark" SelectedValue=@Convert.ToInt32(
                        context.Distributors.Where(d => d.Id == supplier.Id).FirstOrDefault().Rating)></MudRating>
					<td>@supplier.PhoneNumber</td>
                    <td>
                        @foreach (var cuisine in supplier.CuisineArray)
                        {
                            @cuisine<br>
                        }
                    </td>

                    @if(Profile != null && Profile.Subscriptions != null)
                    {
                        @if (Profile.Subscriptions.Contains(Distributors.First(d => d.Id == supplier.Id)))
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" class="btn btn-primary" @onclick="()=>ChangeSubscriptionStatus(context.Distributors.First(d => d.Id == supplier.Id))">Unsubscribe</MudButton>
                        }else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" class="btn btn-primary" @onclick="()=>ChangeSubscriptionStatus(context.Distributors.First(d => d.Id == supplier.Id))">Subscribe</MudButton>
                        }   
                    }
                    
                    
				</tr>
			}
		</tbody>
	</table>
}

@code {
    // private AccountDataSerializer<Profile> _dataSerializer;
    private ObservableCollection<Profile> _searchResult;
    ProjectDatabaseContext context;
    private string canNotConnectText = string.Empty;
    public Profile Profile { get; set; }
    public ObservableCollection<Distributor> Distributors { get; set; }
    public ObservableCollection<Profile> SearchResults
    {
        get
        { return _searchResult; }
        set
        {
            _searchResult = value;

            //onpropertychanged();
        }
    }

    public ObservableCollection<Profile> Profiles
    {
        get; private set;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            context = DbFactory.CreateDbContext();

            var distrib = await context.Distributors.Select(d => d.Id).ToObservableCollectionAsync();
            Profiles = await context.Profiles.Where(p => distrib.Contains(p.Id)).ToObservableCollectionAsync();
            Distributors = await context.Distributors.Include("Subscribers").ToObservableCollectionAsync();

            StateContainer.OnChange += StateHasChanged;
            Profile = CurrentUserContainer.GetProfileFromDB(Logger, context);

            SearchResults = Profiles;

            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Logger.Log(ex);
        }
    }


    public string Search { get; set; }

    public void SearchCommand(string search)
    {
        SearchResults = DataSearch.getSearchResults<Profile>(Profiles, searchQuery: search);
    }


    public void GoToDetailOnClick(Profile profile)
    {
        IdContainer.OnChange += StateHasChanged;
        IdContainer.Id = profile.Id;
        NavigationManager.NavigateTo("/supplierdetails");
    }

    public void ChangeSubscriptionStatus(Distributor distributor)
    {
        if (Profile.Subscriptions.Contains(distributor))
        {
            Profile.Subscriptions.Remove(distributor);
        }else
        {
            Profile.Subscriptions.Add(distributor);
        }
        context.SaveChanges();
    }

    public void Dispose()
    {
        context.SaveChanges();
        if(Profile == null)
        {
            CurrentUserContainer.Logout(Logger, context);
        }
        StateContainer.OnChange -= StateHasChanged;
        context.Dispose();

    }

    public void Refresh()
    {
        if (context.Database.CanConnect())
            NavigationManager.NavigateTo("/supplierlist", true);
        else
        {
            canNotConnectText = "Can not connect to database. Please check your internet connection and try again.";
        }
    }
}
