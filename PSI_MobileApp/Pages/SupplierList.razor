@page "/supplierlist"
@using AccountDataSerializer
@using ClassLibrary
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Storage;
@using Npgsql;
@using PSI_MobileApp.Extensions
@using ProfileClasses
@using System.Collections.ObjectModel
@using System.Net.NetworkInformation

@inject StateContainer StateContainer
@inject IdStateContainer IdContainer
@inject NavigationManager NavigationManager
@inject ExceptionLogger Logger
@inject IDbContextFactory<ProjectDatabaseContext> DbFactory
@implements IDisposable


<h3>Supplier List</h3>

@if (!connected || (Profiles == null) || (Distributors == null))
{ 
    
    <div>
    <input class="form-control" type="text" placeholder="Search"
            @bind="Search"
            @oninput="(e) =>  SearchCommand(e.Value.ToString())" />
    </div>

	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Rating</th>
                <th>Phone number</th>
                <th>Cuisines</th>
			</tr>
		</thead>
    </table>

    <MudOverlay Visible="true" DarkBackground="true" Absolute="true" >
        <MudStack AlignItems="AlignItems.Center">
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
            <MudText>Loading...</MudText>
            <MudText>@errorOccured</MudText>
            <MudText>@canNotConnectText</MudText>
            <MudButton Variant="Variant.Outlined" OnClick="Refresh">Refresh</MudButton>
        </MudStack>
        
    </MudOverlay>
    
}
else
{
    <div>
        <input class="form-control" type="text" placeholder="Search"
                @bind="Search"
                @oninput="(e) =>  SearchCommand(e.Value.ToString())" />
    </div>

	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Rating</th>
                <th>Phone number</th>
                <th>Cuisines</th>
			</tr>
		</thead>
		<tbody>
            @if (SearchResults != null)
			{
                foreach (var supplier in SearchResults)
			    {
                
                    <tr @onclick="()=>GoToDetailOnClick(supplier)">
                        <td>@supplier.Name</td>
                       
                        <td>@(Distributors.Where(d => d.Id == supplier.Id).FirstOrDefault().Rating)</td>
                        
					    <td>@supplier.PhoneNumber</td>
                        <td>
                            @foreach (var cuisine in supplier.CuisineArray)
                            {
                                @cuisine<br>
                            }
                        </td>
				    </tr>
			    }
            }
		</tbody>
    </table>
}


@code {
    // private AccountDataSerializer<Profile> _dataSerializer;
    private ObservableCollection<Profile> _searchResult;
    ProjectDatabaseContext context;
    private string canNotConnectText = string.Empty;
    private string errorOccured = string.Empty;
    private bool connected;
    public ObservableCollection<Profile> SearchResults
    {
        get
        { return _searchResult; }
        set
        {
            _searchResult = value;

            //onpropertychanged();
        }
    }

    public ObservableCollection<Distributor> Distributors
    {
        get; private set;
    }

    public ObservableCollection<Profile> Profiles
    {
        get; private set;
    }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        ActivateTestConnection();
        StateContainer.OnChange += StateHasChanged;
    }


    public string Search { get; set; }

    public void SearchCommand(string search)
    {
        SearchResults = DataSearch.getSearchResults<Profile>(Profiles, searchQuery: search);
    }


    public void GoToDetailOnClick(Profile profile)
    {
        IdContainer.OnChange += StateHasChanged;
        IdContainer.Id = profile.Id;
        NavigationManager.NavigateTo("/supplierlist/supplierdetails");
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
        context.Dispose();
    }

    public void Refresh()
    {
        if (context.Database.CanConnect())
            NavigationManager.NavigateTo("/supplierlist", true);
        else
        {
            canNotConnectText = "Can not connect to database. Please check your internet connection and try again.";
        }
    }


    async void ActivateTestConnection()
    {
        await Task.Run(async () =>
        {
            while (true)
            {
                connected = await TestConnection();
                if (connected)
                    await GetDBData();
                else
                    errorOccured = "A network error occured. Please try again.";
                await InvokeAsync(StateHasChanged);
                await Task.Delay(10000);
            }
        });
    }

    async Task GetDBData()
    {
        try
        {
            var distrib = await context.Distributors.Select(d => d.Id).ToObservableCollecionAsync();
            Profiles = await context.Profiles.Where(p => distrib.Contains(p.Id)).ToObservableCollecionAsync();
            Distributors = await context.Distributors.ToObservableCollecionAsync();
        }
        catch (Exception ex)
        {
            Logger.Log(ex);
        }
        SearchResults = Profiles;
        await InvokeAsync(StateHasChanged);
    }

    public async Task<bool> TestConnection()
    {
        await using (NpgsqlConnection conn = new NpgsqlConnection("Server=host.docker.internal;Port=49172;Database=pg;Uid=postgres;Pwd=postgrespw;"))
        {
            try
            { 
                await conn.OpenAsync();
                var connected = (conn.State == System.Data.ConnectionState.Open);
                await conn.CloseAsync();
                return connected;
            }
            catch
            {
                return false;
            }
        }
    }

}
