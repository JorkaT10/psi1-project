@page "/login"
@using AccountDataSerializer
@using ClassLibrary
@using ProfileClasses
@using System.Collections.ObjectModel
@inject CurrentUserContainer CurrentUserContainer
@using Microsoft.EntityFrameworkCore
@inject StateContainer StateContainer
@inject ExceptionLogger Logger
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ProjectDatabaseContext> DbFactory
@implements IDisposable
<h3> Login </h3>
<MudForm @bind-isValid = "@isValid">
    <MudTextField T="string" Label="Username" @bind-Value="Username" Required="true" RequiredError="Field Username is required."/>
    <MudTextField T="string" Label="Password" @bind-Value="Password" Required="true" RequiredError="Field Password is required." InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
    <MudButton OnClick="HandleValidSubmit" Variant="Variant.Filled"> Login </MudButton>
 </MudForm>



@code {
    public string Username;
    public string Password;
    public InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    bool isShow;
    public bool isValid = true;
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    public void HandleValidSubmit()
    {
        try
        {
            using (var context = DbFactory.CreateDbContext())
            {
                CurrentUserContainer.UserId = context.Accounts.Where(elem => elem.Password == Password && elem.UserName == Username).Select(elem => elem.Id).FirstOrDefault();
            }
        }
        catch(Exception ex)
        {
            Logger.Log(ex);
        }
        if ((CurrentUserContainer.UserId != null) && (CurrentUserContainer.UserId != Guid.Empty))
        {
            NavigationManager.NavigateTo("");
        }
        else {
            isValid = false;
        }

    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
