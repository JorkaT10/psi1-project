@page "/supplierlist/supplierdetails"
@inject StateContainer StateContainer
@inject IDialogService DialogService
<h3>Supplier Details</h3>

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

@if (StateContainer.Supplier == null)
{
    <p>The supplier was not passed correctly or still loading.</p>
}
else
{
    <p>
        Name: @StateContainer.Supplier.Name <br>
        Email: @StateContainer.Supplier.Email <br>
        Phone number: @StateContainer.Supplier.PhoneNumber <br>
        Address: @StateContainer.Supplier.Address.city, @StateContainer.Supplier.Address.streetName @StateContainer.Supplier.Address.streetName <br>
        Cuisines: @foreach (var cuisine in StateContainer.Supplier.Cuisines){ @(cuisine + " ")} <br>
    </p>

    <MudTable Items="StateContainer.Supplier.Advertisements" OnRowClick="RowClickEvent" Hover="true" @ref="mudTable" RowClassFunc="@SelectAdvertisement" T="Advertisement" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Time Of Making</MudTh>
            <MudTh>Pickup Time</MudTh>
            <MudTh>Is Reserved</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.MealName</MudTd>
            <MudTd DataLabel="Time Of Making">@context.TimeOfMaking</MudTd>
            <MudTd DataLabel="Pickup Time">@context.PickupTimeSpan</MudTd>
            <MudTd DataLabel="Is Reserved">@context.IsReserved</MudTd>
        </RowTemplate>

    </MudTable>
    <MudButton Variant="Variant.Filled" OnClick="AddOrderCommand">
        Add order
    </MudButton>
    <MudButton Variant="Variant.Filled" OnClick="RemoveOrderCommand">
        Remove order
    </MudButton>
    <MudButton Variant="Variant.Filled" OnClick="BookOrderCommand">
        Book order
    </MudButton>
}

@code {
    private MudTable<Advertisement> mudTable;
    private List<string> clickedEvents = new();
    private Advertisement SelectedAdvertisement { get; set; }
    private int selectedRowNumber = -1; 

    public string SelectAdvertisement(Advertisement advert, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            SelectedAdvertisement = null;
            return String.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(advert))
        {
            selectedRowNumber = rowNumber;
            SelectedAdvertisement = advert;
            return "selected";
        }
        else
        {
            return String.Empty;
        }

    }

    public async Task AddOrderCommand()
    {
        DialogOptions noHeader = new DialogOptions() { NoHeader = true };

        var dialog = DialogService.Show<AddOrderDialog>("", noHeader);
        var res = await dialog.Result;
        if (!res.Cancelled)
        {
            if (StateContainer.Supplier.Advertisements == null)
                StateContainer.Supplier.Advertisements = new();
            StateContainer.Supplier.Advertisements.Add(res.Data as Advertisement);
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<Advertisement> tableRowClickEventArgs)
    {

    }

    private void RemoveOrderCommand()
    {
        StateContainer.Supplier.Advertisements.Remove(SelectedAdvertisement);
    }

    private void BookOrderCommand()
    {
        if (SelectedAdvertisement != null)
        {
            var item = StateContainer.Supplier.Advertisements.FirstOrDefault(i => i.Equals(SelectedAdvertisement));
            if (item != null)
            {
                item.IsReserved = !item.IsReserved;
            }
        }
    }
}
