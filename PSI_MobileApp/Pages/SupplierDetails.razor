@page "/supplierdetails"
@using ClassLibrary
@using System.Collections.ObjectModel
@using Microsoft.EntityFrameworkCore
@using PSI_MobileApp.DataServices
@using PSI_MobileApp.Extensions
@using MudBlazor
@using MudBlazorFix
@inject IdStateContainer IdContainer
@inject CurrentUserContainer ProfileContainer
@inject IDialogService DialogService
@inject IGetData data


<MudText Typo="Typo.h4">Supplier Details</MudText>

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>
@if (connected)
{
    @if (IdContainer.Id == Guid.Empty && ExceptionMessage != string.Empty)
    {
        <MudText Typo="Typo.h4">The supplier was not passed correctly or still loading. @ExceptionMessage</MudText>
    }
    else if (profile != null)
    {
    
        <MudText><b>Name:</b> @profile.Name</MudText>
        <MudText><b>Email:</b> @profile.Email </MudText>
        <MudText><b>Phone number:</b> @profile.PhoneNumber </MudText>
        <MudText><b>Address:</b> @profile.TypedAddress.City, @profile.TypedAddress.StreetName st. @profile.TypedAddress.StreetNumber</MudText>
        <MudText><b>Cuisines:</b> 
            @foreach (var cuisine in profile.CuisineArray)
            {
                var last = profile.CuisineArray.LastOrDefault();
                if (cuisine != last)
                    @(cuisine + ", ")
                else
                    @cuisine
            } 
        </MudText>

        <MudTable ServerData="@(new Func<TableState, Task<TableData<Advertisement>>>(ServerReload))"  OnRowClick="RowClickEvent" Hover="true" @ref="mudTable" RowClassFunc="@SelectAdvertisement" T="Advertisement" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="name" T="Advertisement">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="making_time" T="Advertisement">Time of making</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="pickup_time" T="Advertisement">Pickup Time</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="price" T="Advertisement">Price</MudTableSortLabel></MudTh>
                @if (ProfileContainer.UserId == IdContainer.Id)
                {
                   <MudTh><MudTableSortLabel SortLabel="reserved" T="Advertisement">Is Reserved</MudTableSortLabel></MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                @if (context.Buyer == null)
                {
                    <MudTd DataLabel="Name">@context.MealName</MudTd>
                    <MudTd DataLabel="Time Of Making">@HandleTime(context.TimeOfMaking)</MudTd>
                    <MudTd DataLabel="Pickup Deadline">@HandleTime(context.PickupTimeSpan)</MudTd>
                    <MudTd DataLabel="Price">@context.Cost Eur</MudTd>
                    if (ProfileContainer.UserId == IdContainer.Id)
                    {
                       <MudTd DataLabel="Is Reserved">@(context.Buyer != null)</MudTd>
                    }
                }
                else if ((ProfileContainer.UserId != null) && (context.Buyer.Id == ProfileContainer.UserId || ProfileContainer.UserId == IdContainer.Id))
                {
                    <MudTd DataLabel="Name">@context.MealName</MudTd>
                    <MudTd DataLabel="Time Of Making">@HandleTime(context.TimeOfMaking)</MudTd>
                    <MudTd DataLabel="Pickup Deadline">@HandleTime(context.PickupTimeSpan)</MudTd>
                    <MudTd DataLabel="Price">@context.Cost Eur</MudTd>
                    if (ProfileContainer.UserId == IdContainer.Id)
                    {
                        <MudTd DataLabel="Is Reserved">@(context.Buyer != null)</MudTd>
                    }
                }
            </RowTemplate>
        </MudTable>
        @if (ProfileContainer.UserId != null)
        {
            if (ProfileContainer.UserId == IdContainer.Id)
            {
                <MudButton Variant="Variant.Filled" OnClick="AddOrderCommand" >
                    Add order
                </MudButton>
                <MudButton Variant="Variant.Filled" OnClick="RemoveOrderCommand">
                    Remove order
                </MudButton>
            }
            if (ProfileContainer.UserId != IdContainer.Id)
            {
                <MudButton Variant="Variant.Filled" OnClick="BookOrderCommand">
                    Book order
                </MudButton>
            }
        }
        else
        {
            <MudText>Please log in to book orders.</MudText>
        }
        
    
    }
}
else
{
    <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
         <MudStack AlignItems="AlignItems.Center">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            <MudText>@errorOccured</MudText>
         </MudStack>
    </MudOverlay>
}



@code {
    private ObservableCollection<Advertisement> adverts;
    private MudTable<Advertisement> mudTable;
    private Advertisement SelectedAdvertisement { get; set; }
    private int selectedRowNumber = -1;
    private ProfileClasses.Profile profile;
    private string ExceptionMessage { get; set; }
    private bool connected;
    private string errorOccured;


    protected override async Task OnInitializedAsync()
    {
        ActivateTestConnection();

    }

    async void ActivateTestConnection()
    {
        await Task.Run(async () =>
        {
            while (true)
            {
                using (ProjectDatabaseContext dbContext = new()) // CHANGE
                {
                    connected = await dbContext.TestConnection();
                    if (connected)
                        await GetDBData();
                    else
                        errorOccured = "A network error occured. Please try again.";
                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(10000);
                }  
            }
        });
    }

    async Task GetDBData()
    {
        await data.RemoveOutdated(DateTime.UtcNow);
        profile = await data.GetProfileById(IdContainer.Id);
        adverts = await data.GetAdsByDistributorId(IdContainer.Id);
        await InvokeAsync(StateHasChanged);
    }


    public string SelectAdvertisement(Advertisement advert, int rowNumber)
    {

        if (SelectedAdvertisement == null) 
        {
            return String.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(advert))
        {
            selectedRowNumber = rowNumber;
            SelectedAdvertisement = advert;
            return "selected";
        }
        else
        {   
            return String.Empty;
        }


    }

    public async Task AddOrderCommand()
    {   
        DialogOptions noHeader = new DialogOptions() { NoHeader = true };
        var dialog = DialogService.Show<AddOrderDialog>("", noHeader);
        var res = await dialog.Result;

        if (!res.Cancelled)
        {
            var adv = res.Data as Advertisement;
            adv.Id = Guid.NewGuid();
            var search = await data.GetDistributorsById(IdContainer.Id);//dbContext.Distributors.Where(d => d.Id == IdContainer.Id).FirstOrDefault();
            adv.Distributor = search;
            await data.AddAd(adv as Advertisement, search.Id);
            selectedRowNumber = -1;
            mudTable.SetSelectedItem(null);
            await mudTable.ReloadServerData();
        }

    }

    private void RowClickEvent(TableRowClickEventArgs<Advertisement> tableRowClickEventArgs)
    {
        if (SelectedAdvertisement == tableRowClickEventArgs.Item)
        {
            SelectedAdvertisement = null;
            selectedRowNumber = -1;
        }
        else
            SelectedAdvertisement = tableRowClickEventArgs.Item;

    }

    private async Task RemoveOrderCommand()
    {
        var allAdvertisements = await data.GetAllAdvertisements();
        await data.RemoveAdvertisement(SelectedAdvertisement);
        await mudTable.ReloadServerData();
    }

    private async Task BookOrderCommand()
    {
        if (SelectedAdvertisement != null)
        {
            var buyer = SelectedAdvertisement.Buyer;
            if (buyer == null)
            {
                var currentProfile = ProfileContainer.GetUserProfile(); //dbContext.Profiles.Where(p => p.Id == ProfileContainer.UserId);
                await data.ChangeOrderStatus(SelectedAdvertisement.Id, currentProfile.Id);//advert.FirstOrDefault().Buyer = currentProfile;
                selectedRowNumber = -1;
                mudTable.SetSelectedItem(null);
                await mudTable.ReloadServerData();
            }
            else
            {
                if (buyer.Id == ProfileContainer.UserId)
                {
                    await data.ChangeOrderStatus(SelectedAdvertisement.Id, Guid.Empty);
                    selectedRowNumber = -1;
                    mudTable.SetSelectedItem(null);
                    await mudTable.ReloadServerData();
                }
            }
            SelectedAdvertisement = null;

        }
    }

    public void Dispose()
    {
        IdContainer.OnChange -= StateHasChanged;
    }

    private string HandleTime(DateTime time)
    {
        return time.ToLocalTime().ToString("ddd, yyyy-MM-dd HH':'mm':'ss");
    }

    private IEnumerable<Advertisement> pagedData;
    private int totalItems;
    private async Task<TableData<Advertisement>> ServerReload(TableState state)
    {
        selectedRowNumber = -1;
        mudTable.SetSelectedItem(null);
        SelectedAdvertisement = null;
        await data.RemoveOutdated(DateTime.UtcNow);
        IEnumerable<Advertisement> query = await data.GetAdsByDistributorId(profile.Id); // dbContext.Advertisements.Include(a => a.Buyer).Where(a => a.Distributor.Id == profile.Id);
        await Task.Delay(300);

            switch (state.SortLabel)
            {
                case "name":
                    query = query.OrderByDirection(state.SortDirection, o => o.MealName);
                    break;
                case "making_time":
                    query = query.OrderByDirection(state.SortDirection, o => o.TimeOfMaking);
                    break;
                case "pickup_time":
                    query = query.OrderByDirection(state.SortDirection, o => o.PickupTimeSpan);
                    break;
                case "price":
                    query = query.OrderByDirection(state.SortDirection, o => o.Cost);
                    break;
                case "reserved":
                    query = query.OrderByDirection(state.SortDirection, o => (o.Buyer != null));
                    break;
                default:
                    query = query.OrderBy(o => o.MealName);
                    break;
            }

            totalItems = query.Count();
            pagedData = query.Skip(state.Page * state.PageSize).Take(state.PageSize);
            return new TableData<Advertisement>() { TotalItems = totalItems, Items = pagedData };

    }
}