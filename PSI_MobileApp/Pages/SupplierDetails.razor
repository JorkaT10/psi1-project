@page "/supplierlist/supplierdetails"
@using ClassLibrary
@using System.Collections.ObjectModel
@inject StateContainer StateContainer
@inject IDialogService DialogService
<MudText Typo="Typo.h4">Supplier Details</MudText>

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

@if (StateContainer.Id == Guid.Empty)
{
    <MudText Typo="Typo.h4">The supplier was not passed correctly or still loading.</MudText>
}
else
{
    
    <MudText><b>Name:</b> @profile.Name</MudText>
    <MudText><b>Email:</b> @profile.Email </MudText>
    <MudText><b>Phone number:</b> @profile.PhoneNumber </MudText>
    <MudText><b>Address:</b> @profile.TypedAddress.City, @profile.TypedAddress.StreetName st. @profile.TypedAddress.StreetNumber</MudText>
    <MudText><b>Cuisines:</b> 
        @foreach (var cuisine in profile.Cuisines)
        {
            @(cuisine + " ")
        } 
    </MudText>


    <MudTable Items="dbContext.Advertisements.Where(a => a.Distributor.Id == StateContainer.Id)" OnRowClick="RowClickEvent" Hover="true" @ref="mudTable" RowClassFunc="@SelectAdvertisement" T="Advertisement" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Time of making</MudTh>
            <MudTh>Pickup Time</MudTh>
            <MudTh>Is Reserved</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.MealName</MudTd>
            <MudTd DataLabel="Time Of Making">@context.TimeOfMaking</MudTd>
            <MudTd DataLabel="Pickup Time">@context.PickupTimeSpan</MudTd>
            <MudTd DataLabel="Is Reserved">@context.IsReserved</MudTd>
        </RowTemplate>
    </MudTable>

    <MudButton Variant="Variant.Filled" OnClick="AddOrderCommand">
        Add order
    </MudButton>
    <MudButton Variant="Variant.Filled" OnClick="RemoveOrderCommand">
        Remove order
    </MudButton>
    <MudButton Variant="Variant.Filled" OnClick="BookOrderCommand">
        Book order
    </MudButton>
}

@code {
    private ProjectDatabaseContext dbContext;
    //private ObservableCollection<Advertisement> adverts;
    private MudTable<Advertisement> mudTable;
    private List<string> clickedEvents = new();
    private Advertisement SelectedAdvertisement { get; set; }
    private int selectedRowNumber = -1;
    private ProfileClasses.Profile profile;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        dbContext = new();
        profile = dbContext.Profiles.Where(p => p.Id == StateContainer.Id).FirstOrDefault();
        //adverts = new ObservableCollection<Advertisement>(dbContext.Advertisements.Where(a => a.Id == StateContainer.Id));
    }

    public string SelectAdvertisement(Advertisement advert, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            SelectedAdvertisement = null;
            return String.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(advert) && SelectedAdvertisement != null)
        {
            selectedRowNumber = rowNumber;
            SelectedAdvertisement = advert;
            return "selected";
        }
        else
        {
            return String.Empty;
        }

    }

    public async Task AddOrderCommand()
    {
        DialogOptions noHeader = new DialogOptions() { NoHeader = true };

        var dialog = DialogService.Show<AddOrderDialog>("", noHeader);
        var res = await dialog.Result;

        if (!res.Cancelled)
        {
            var adv = res.Data as Advertisement;
            adv.Id = new Guid();
            var search = dbContext.Distributors.Where(d => d.Id == StateContainer.Id).FirstOrDefault();
            var tmp = new ObservableCollection<ProfileClasses.Profile>();
            tmp.Add(profile);
            if (search != null)
                adv.Distributor = search;
            else
            {
                dbContext.Add<ProfileClasses.Distributor>(new ProfileClasses.Distributor() 
                { 
                    Id = StateContainer.Id, 
                    Rating = 5, 
                    RatingAmount = 100, 
                    Subscribers = tmp, 
                    Advertisements = new ObservableCollection<Advertisement>(dbContext.Advertisements.Where(a => a.Distributor.Id == StateContainer.Id))
                });
                dbContext.SaveChanges();
            }
            dbContext.Add<Advertisement>(res.Data as Advertisement);
            dbContext.SaveChanges();

            //adverts.Add(res.Data as Advertisement);
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<Advertisement> tableRowClickEventArgs)
    {
        SelectedAdvertisement = tableRowClickEventArgs.Item;
    }

    private void RemoveOrderCommand()
    {
        dbContext.Advertisements.Remove(SelectedAdvertisement);
        dbContext.SaveChanges();
        //adverts.Remove(SelectedAdvertisement);
    }

    private void BookOrderCommand()
    {
        if (SelectedAdvertisement != null)
        {
            dbContext.Advertisements.FirstOrDefault(i => i.Equals(SelectedAdvertisement)).IsReserved = !dbContext.Advertisements.FirstOrDefault(i => i.Equals(SelectedAdvertisement)).IsReserved;
            dbContext.SaveChanges();
        }
    }
}
