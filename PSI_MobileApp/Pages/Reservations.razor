@page "/reservations"
@using System.Collections.ObjectModel;
@using ClassLibrary
@using PSI_MobileApp.Extensions;
@using ProfileClasses
@using Microsoft.EntityFrameworkCore
@inject StateContainer StateContainer
@inject CurrentUserContainer CurrentUserContainer
@inject IDbContextFactory<ProjectDatabaseContext> DbFactory
@implements IDisposable

<h3>Reservations</h3>

@if (CurrentUserContainer.UserId == Guid.Empty || UserReservations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Meal Name</th>
                <th>Distributor</th>
                <th>Reserved until</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var reservation in UserReservations)
            {
                <tr>
                    <td>@reservation.MealName</td>
                    <td>@GetDistributorName(reservation) </td>
                    <td>@reservation.PickupTimeSpan</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public ObservableCollection<Advertisement> UserReservations { get; set; }
    private ProjectDatabaseContext _context;

    public Reservations()
    {

    }

    public string GetDistributorName(Advertisement adv)
    {
        return _context.Profiles.Where(elem => elem.Id == adv.Distributor.Id).FirstOrDefault().Name;
    }

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
        _context = DbFactory.CreateDbContext();
        UserReservations = _context.Advertisements.Include("Buyer").Include("Distributor").Where(i => i.Buyer.Id == CurrentUserContainer.UserId).ToObservableCollection();
}
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
        _context.Dispose();
    }

}
