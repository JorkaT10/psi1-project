@page "/reservations"
@using System.Collections.ObjectModel;
@using ClassLibrary
@using PSI_MobileApp.DataServices;
@using PSI_MobileApp.Extensions;
@using ProfileClasses
@using Microsoft.EntityFrameworkCore
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using PSI_MobileApp.Containers;
@inject StateContainer StateContainer
@inject CurrentUserContainer CurrentUserContainer
@inject IGetData data
@implements IDisposable

<h3>Reservations</h3>

@if (CurrentUserContainer.UserId == Guid.Empty || UserReservations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="margin-bottom:40px; height:100px;">
        <GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="100%" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(_ => AddDirections())">Add Direction</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@( _distanceTotalString => RemoveRoute())">Remove route</MudButton>
    </div>

    <div style="margin-top:20px; margin-bottom:20px; min-height:100px">
        <table class="table">
            <thead>
                <tr>
                    <th>Meal Name</th>
                    <th>Distributor</th>
                    <th>Reserved until</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reservation in UserReservations)
                {
                    <tr>
                        <td>@reservation.MealName</td>
                        <td>@GetDistributorName(reservation) </td>
                        <td>@reservation.PickupTimeSpan</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
}

@code {
    public ObservableCollection<Advertisement> UserReservations { get; set; }
    public List<DirectionsWaypoint> Waypoints { get; set; }
    public ObservableCollection<Profile> DistributorProfiles { get; set; }
    private GoogleMap map1;
    private MapOptions mapOptions;
    private DirectionsRenderer dirRend;
    private string _durationTotalString;
    private string _distanceTotalString;

    public Reservations()
    {

    }

    public string GetDistributorName(Advertisement adv)
    {
        return DistributorProfiles.Where(a => a.Id == adv.Distributor.Id).First().Name;
    }

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;
        mapOptions = new MapOptions()
        {
                Zoom = 13,
                Center = new LatLngLiteral()
                {
                    Lat = 54.675892,
                    Lng = 25.512093
                },
                MapTypeId = MapTypeId.Roadmap
        };

        UserReservations = await data.GetAdsByBuyerId(CurrentUserContainer.UserId);
        DistributorProfiles = await data.GetDistributorProfiles();

    }

    private async Task OnAfterInitAsync()
    {
        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });
    }

    private async Task AddDirections()
    {
        _durationTotalString = null;
        _distanceTotalString = null;
        if (await dirRend.GetMap() is null) await dirRend.SetMap(map1.InteropObject);

        //Adding route waypoints
        Waypoints = new();
        var user = await data.GetProfileById(CurrentUserContainer.UserId);
        var userLocation = user.TypedAddress.StreetName + " " + user.TypedAddress.StreetNumber + ", " + user.TypedAddress.City + " LT";
        Waypoints.Add(new DirectionsWaypoint()
        {
                Location = userLocation
        });

        //DistributorProfiles.ForEach(w =>
        //{
        //    Waypoints.Add(new DirectionsWaypoint() { 
        //        Location = w.TypedAddress.StreetName + " " + w.TypedAddress.StreetNumber + ", " + w.TypedAddress.City + " LT"
        //        , Stopover = true });
        //});

        Waypoints.Add(new DirectionsWaypoint()
        {
            Location = "Didlaukio st. 47, Vilnius LT"
        });
        Waypoints.Add(new DirectionsWaypoint()
        {
            Location = "Ateities st. 47, Vilnius LT"
        });
        Waypoints.Add(new DirectionsWaypoint()
        {
            Location = "Geležinio Vilko g. st. 47, Vilnius LT"
        });

        if(Waypoints.Count != 0)
        {
            DirectionsRequest dr = new DirectionsRequest();
            dr.Origin = Waypoints.First().Location;
            dr.Destination = Waypoints.Last().Location;
            dr.Waypoints = Waypoints;
            dr.TravelMode = TravelMode.Driving;
            //dr.OptimizeWaypoints = true;

            var directionsResult = await dirRend.Route(dr);
            foreach (var route in directionsResult.Routes.SelectMany(x => x.Legs))
            {
                _durationTotalString += route.Duration.Text;
                _distanceTotalString += route.Distance.Text;
            }
        }
    }

    private async Task RemoveRoute()
    {
        await dirRend.SetMap(null);

        _durationTotalString = null;
        _distanceTotalString = null;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

}
