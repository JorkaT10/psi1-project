@page "/inputcontactdata"
@using AccountDataSerializer
@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json
@using ProfileClasses
@using System.Collections.ObjectModel
@using System.Text.Json
@using ClassLibrary
@using System.ComponentModel.DataAnnotations
@inject StateContainer StateContainer
@inject CurrentUserContainer CurrentUserContainer
@inject ExceptionLogger logger
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ProjectDatabaseContext> DbFactory
@implements IDisposable
<h3>Input Contact Data</h3>
@if ((CurrentUserContainer.UserId != Guid.Empty))
{
    <MudForm @bind-isValid="@isValid">
        @if (StateContainer.CreatingDistributor)
        {
            <MudTextField T="string" Label="Establisment Name" @bind-Value="DistributorName" Required="false" RequiredError="Please enter the name of Your Establishment!" />
        }
        <MudTextField T="string" Label="Phone Number" @bind-Value="Phone" Required="false" Validation="@(new PhoneAttribute() {ErrorMessage = "This is not a valid Phone Number."})" />
        <MudTextField T="string" Label="City" @bind-Value="City" Required="false" RequiredError="Field City is required." />
        <MudTextField T="string" Label="Street Name" @bind-Value="StreetName" Required="false" RequiredError="Field Street Name is required." />
        <MudTextField T="int?" Label="Street Number" @bind-Value="StreetNumber" Required="false" RequiredError="Field Street Number is required." Validation="@(new RangeAttribute(1, 1000000) {ErrorMessage = "A Street Number can not be negative or zero."})" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isValid)" Class="ml-auto" @onclick="HandleValidSubmit">Register</MudButton>
    </MudForm>
}
else
{
    <MudForm @bind-isValid="@isValid">
        @if (StateContainer.CreatingDistributor)
        {
            <MudTextField T="string" Label="Establisment Name" @bind-Value="DistributorName" Required="true" RequiredError="Please enter the name of Your Establishment!" />
        }
        <MudTextField T="string" Label="Phone Number" @bind-Value="Phone" Required="false" Validation="@(new PhoneAttribute() {ErrorMessage = "This is not a valid Phone Number."})" />
        <MudTextField T="string" Label="City" @bind-Value="City" Required="true" RequiredError="Field City is required." />
        <MudTextField T="string" Label="Street Name" @bind-Value="StreetName" Required="true" RequiredError="Field Street Name is required." />
        <MudTextField T="int?" Label="Street Number" @bind-Value="StreetNumber" Required="true" RequiredError="Field Street Number is required." Validation="@(new RangeAttribute(1, 1000000) {ErrorMessage = "A Street Number can not be negative or zero."})" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isValid)" Class="ml-auto" @onclick="HandleValidSubmit">Register</MudButton>
    </MudForm>
}


@code {
    public string Phone;
    public string City;
    public string StreetName;
    public int? StreetNumber;
    public bool isValid;
    public string DistributorName = string.Empty;
    public void HandleValidSubmit()
    {
        if ((CurrentUserContainer.UserId == Guid.Empty))
        {
            Address address = new();
            if (StateContainer.CreatingDistributor)
            {
                StateContainer.TempProfile.Name = DistributorName;
            }
            address.StreetNumber =  (int)StreetNumber;
            address.StreetName = StreetName;
            address.City = City;
            StateContainer.TempProfile.PhoneNumber = Phone;
            StateContainer.TempProfile.TypedAddress = address;
            NavigationManager.NavigateTo("choosecuisines");
        }
        else
        {
            Address address = new();
            if (StateContainer.CreatingDistributor)
            {
                StateContainer.TempProfile.Name = DistributorName;
            }
            address.StreetNumber = StreetNumber == null ? CurrentUserContainer.GetUserProfile().TypedAddress.StreetNumber : (int)StreetNumber;
            address.StreetName = StreetName == null ? CurrentUserContainer.GetUserProfile().TypedAddress.StreetName : StreetName;
            address.City = City == null ? CurrentUserContainer.GetUserProfile().TypedAddress.City : City;
            Phone ??= CurrentUserContainer.GetUserProfile().PhoneNumber;
            using (var db = DbFactory.CreateDbContext())
            {
                var result = db.Profiles.SingleOrDefault(elem => elem.Id == CurrentUserContainer.GetUserProfile().Id);
                if (result != null)
                {
                    result.PhoneNumber = Phone;
                    result.TypedAddress = address;
                    db.SaveChanges();
                    CurrentUserContainer.GetUserProfile().TypedAddress = address;
                    CurrentUserContainer.GetUserProfile().PhoneNumber = Phone;

                }
            }
            
            NavigationManager.NavigateTo("profile");
        }
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
